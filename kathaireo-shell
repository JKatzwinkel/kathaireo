#!/usr/bin/python
# -*- coding: utf-8 -*- 
"""Dokudoku!"""
__docformat__ = "restructuredtext en"
__version__ = "0.0.21-dev"
__author__ = "Dariah-DE"

import getopt

#import kathaireo
from kathaireo import shell

def main():
	#import html5lib
	import sqlalchemy
	welcome=[
		'This is {}, version "{}".'.format(__file__, __version__),
		' !rdflib! version: {}'.format(shell.rdf.rdflib.__version__),
		' *rdflib_sqlalchemy* version: {}'.format(
		shell.rdf.storage.rdflib_sqlalchemy.__version__),
		' *sqlalchemy* version: {}'.format(sqlalchemy.__version__),
		#' *html5lib* version: {}'.format(html5lib.__version__),
		' *urllib2* version: {}'.format(shell.rdf.remote.urllib2.__version__),
		'*stats:*',
		' default commands ready: {}'.format(
		len(shell.commands.cmdict)),
		' number of known command attributes: {}'.format(
		len(shell.commands.arguments.arghist)),
		#'root modules and packages'
		]
	#for m in kathaireo.__all__:
		#mod = getattr(kathaireo, m)
		#welcome.append(' {} at {}: version="{}"'.format(
			#mod.__name__, mod.__path__, mod.__version__))
	del sqlalchemy
	#del html5lib
	#shell.prompt.col_demo()
	shell.prompt.display(welcome)
	shell.run()


if __name__=='__main__':
	main()

# https://rdfalchemy.readthedocs.org/en/latest/

# in particular, read the rdflib package doc
	# https://rdflib.readthedocs.org/en/latest/apidocs/rdflib.html
# and those about its subpackages:
	# https://rdflib.readthedocs.org/en/latest/apidocs/rdflib.html#subpackages

#TODO: handle command line parameters in here.
#TODO: bash autocompletion
#TODO? parsing of remote resources (https://kask.eti.pg.gda.pl/redmine/projects/sova/repository/revisions/00951bd8e28d7bd58facb5a1da3a17ae9df115d4/raw/portalSubsystem/data/pizza.owl)
#TODO: somehow wrap line if input gets too long. http://stackoverflow.com/questions/9468435/look-how-to-fix-column-calculation-in-python-readline-if-use-color-prompt
#TODO: rewrite rdf module from scratch. provide simple facade for rdflib functionality!
			#	furthermore, maintain directory of active graphs, namespaces and stuff...
			# resource directories:
				# >>> paper = Resource(graph, URIRef("http://example.org/def/v#Paper"))
				# >>> paper.add(RDFS.subClassOf, artifact)
				# https://rdflib.readthedocs.org/en/latest/apidocs/rdflib.html#module-rdflib.resource
#TODO: reevaluate module namespaces. rdflib already has such a module, and we must find out if
			# encapsulating rdflib graphs into namespace objects is worth the redundancy. 
			# do we even retrieve useful triple content from the namespace urls?
#TODO: remove url -> ns:term collapsing from prompter module. This can be done better and easier
			# by rdflib itself: a graph automatically binds namespaces (ns1, ns2...) for every new
			# ns realm a newly added triple's property introduces. (Not for subject and object, though)
			# print g.serialize(format='n3') shows n3 formatting of the graph, with properties
			# collapsed into ns:term, but subjects and objects unaltered.
			# https://rdflib.readthedocs.org/en/latest/apidocs/rdflib.html
			# so, maybe we still need to take care of shortening urls ourselves...
			# No! what we want is the graph.namespace_manager.qname function. (takes a url as
			# a unicode string and returns its ns:term representation.
			# weird thing: if url does not fit any already bound ns, a new one is bound to the graph
			# instantly. so we might end up with very numerous namespace bindings..
				# g.namespace_manager.qname(u'http://telota.bbarw.de/test#whatevs')
				# Out[26]: u'ns3:whatevs'
#TODO: write reusable command args resolving at arguments? module
#TODO: better reuse of own code and especially rdflib methods in rdf module!!!

#try to parse these ontologies from the internet:
# https://owlverbalizer.googlecode.com/hg-history/8da67288d6be51f8d635f3bb347bacb1cf74f811/examples/tests.owl
# http://smi-protege.stanford.edu/repos/protege/protege4/libraries/owlapi-extensions/trunk/src/test/resources/pizza01.owl
# http://wise.vub.ac.be/ontologies/restaurant.owl


